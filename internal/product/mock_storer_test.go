// Code generated by mockery v2.43.2. DO NOT EDIT.

package product

import (
	store "github.com/opplieam/bb-product-server/internal/store"
	mock "github.com/stretchr/testify/mock"
)

// MockStorer is an autogenerated mock type for the Storer type
type MockStorer struct {
	mock.Mock
}

type MockStorer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStorer) EXPECT() *MockStorer_Expecter {
	return &MockStorer_Expecter{mock: &_m.Mock}
}

// GetAllProducts provides a mock function with given fields: userID
func (_m *MockStorer) GetAllProducts(userID uint32) ([]store.ResultGetAllProducts, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllProducts")
	}

	var r0 []store.ResultGetAllProducts
	var r1 error
	if rf, ok := ret.Get(0).(func(uint32) ([]store.ResultGetAllProducts, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uint32) []store.ResultGetAllProducts); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]store.ResultGetAllProducts)
		}
	}

	if rf, ok := ret.Get(1).(func(uint32) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorer_GetAllProducts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllProducts'
type MockStorer_GetAllProducts_Call struct {
	*mock.Call
}

// GetAllProducts is a helper method to define mock.On call
//   - userID uint32
func (_e *MockStorer_Expecter) GetAllProducts(userID interface{}) *MockStorer_GetAllProducts_Call {
	return &MockStorer_GetAllProducts_Call{Call: _e.mock.On("GetAllProducts", userID)}
}

func (_c *MockStorer_GetAllProducts_Call) Run(run func(userID uint32)) *MockStorer_GetAllProducts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint32))
	})
	return _c
}

func (_c *MockStorer_GetAllProducts_Call) Return(_a0 []store.ResultGetAllProducts, _a1 error) *MockStorer_GetAllProducts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorer_GetAllProducts_Call) RunAndReturn(run func(uint32) ([]store.ResultGetAllProducts, error)) *MockStorer_GetAllProducts_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStorer creates a new instance of MockStorer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStorer {
	mock := &MockStorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
