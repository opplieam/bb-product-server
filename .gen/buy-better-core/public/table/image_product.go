//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ImageProduct = newImageProductTable("public", "image_product", "")

type imageProductTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnInteger
	ImageURL  postgres.ColumnString
	ProductID postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ImageProductTable struct {
	imageProductTable

	EXCLUDED imageProductTable
}

// AS creates new ImageProductTable with assigned alias
func (a ImageProductTable) AS(alias string) *ImageProductTable {
	return newImageProductTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ImageProductTable with assigned schema name
func (a ImageProductTable) FromSchema(schemaName string) *ImageProductTable {
	return newImageProductTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ImageProductTable with assigned table prefix
func (a ImageProductTable) WithPrefix(prefix string) *ImageProductTable {
	return newImageProductTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ImageProductTable with assigned table suffix
func (a ImageProductTable) WithSuffix(suffix string) *ImageProductTable {
	return newImageProductTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newImageProductTable(schemaName, tableName, alias string) *ImageProductTable {
	return &ImageProductTable{
		imageProductTable: newImageProductTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newImageProductTableImpl("", "excluded", ""),
	}
}

func newImageProductTableImpl(schemaName, tableName, alias string) imageProductTable {
	var (
		IDColumn        = postgres.IntegerColumn("id")
		ImageURLColumn  = postgres.StringColumn("image_url")
		ProductIDColumn = postgres.IntegerColumn("product_id")
		allColumns      = postgres.ColumnList{IDColumn, ImageURLColumn, ProductIDColumn}
		mutableColumns  = postgres.ColumnList{ImageURLColumn, ProductIDColumn}
	)

	return imageProductTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		ImageURL:  ImageURLColumn,
		ProductID: ProductIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
