//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Users = newUsersTable("public", "users", "")

type usersTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnInteger
	CreatedAt postgres.ColumnTimestampz
	LoginAt   postgres.ColumnTimestampz
	Email     postgres.ColumnString
	FirstName postgres.ColumnString
	LastName  postgres.ColumnString
	Active    postgres.ColumnBool
	Role      postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type UsersTable struct {
	usersTable

	EXCLUDED usersTable
}

// AS creates new UsersTable with assigned alias
func (a UsersTable) AS(alias string) *UsersTable {
	return newUsersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UsersTable with assigned schema name
func (a UsersTable) FromSchema(schemaName string) *UsersTable {
	return newUsersTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UsersTable with assigned table prefix
func (a UsersTable) WithPrefix(prefix string) *UsersTable {
	return newUsersTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UsersTable with assigned table suffix
func (a UsersTable) WithSuffix(suffix string) *UsersTable {
	return newUsersTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUsersTable(schemaName, tableName, alias string) *UsersTable {
	return &UsersTable{
		usersTable: newUsersTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newUsersTableImpl("", "excluded", ""),
	}
}

func newUsersTableImpl(schemaName, tableName, alias string) usersTable {
	var (
		IDColumn        = postgres.IntegerColumn("id")
		CreatedAtColumn = postgres.TimestampzColumn("created_at")
		LoginAtColumn   = postgres.TimestampzColumn("login_at")
		EmailColumn     = postgres.StringColumn("email")
		FirstNameColumn = postgres.StringColumn("first_name")
		LastNameColumn  = postgres.StringColumn("last_name")
		ActiveColumn    = postgres.BoolColumn("active")
		RoleColumn      = postgres.StringColumn("role")
		allColumns      = postgres.ColumnList{IDColumn, CreatedAtColumn, LoginAtColumn, EmailColumn, FirstNameColumn, LastNameColumn, ActiveColumn, RoleColumn}
		mutableColumns  = postgres.ColumnList{CreatedAtColumn, LoginAtColumn, EmailColumn, FirstNameColumn, LastNameColumn, ActiveColumn, RoleColumn}
	)

	return usersTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		CreatedAt: CreatedAtColumn,
		LoginAt:   LoginAtColumn,
		Email:     EmailColumn,
		FirstName: FirstNameColumn,
		LastName:  LastNameColumn,
		Active:    ActiveColumn,
		Role:      RoleColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
