//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var UserSubProduct = newUserSubProductTable("public", "user_sub_product", "")

type userSubProductTable struct {
	postgres.Table

	// Columns
	ID             postgres.ColumnInteger
	UserID         postgres.ColumnInteger
	GroupProductID postgres.ColumnInteger
	CreatedAt      postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type UserSubProductTable struct {
	userSubProductTable

	EXCLUDED userSubProductTable
}

// AS creates new UserSubProductTable with assigned alias
func (a UserSubProductTable) AS(alias string) *UserSubProductTable {
	return newUserSubProductTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserSubProductTable with assigned schema name
func (a UserSubProductTable) FromSchema(schemaName string) *UserSubProductTable {
	return newUserSubProductTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserSubProductTable with assigned table prefix
func (a UserSubProductTable) WithPrefix(prefix string) *UserSubProductTable {
	return newUserSubProductTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserSubProductTable with assigned table suffix
func (a UserSubProductTable) WithSuffix(suffix string) *UserSubProductTable {
	return newUserSubProductTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserSubProductTable(schemaName, tableName, alias string) *UserSubProductTable {
	return &UserSubProductTable{
		userSubProductTable: newUserSubProductTableImpl(schemaName, tableName, alias),
		EXCLUDED:            newUserSubProductTableImpl("", "excluded", ""),
	}
}

func newUserSubProductTableImpl(schemaName, tableName, alias string) userSubProductTable {
	var (
		IDColumn             = postgres.IntegerColumn("id")
		UserIDColumn         = postgres.IntegerColumn("user_id")
		GroupProductIDColumn = postgres.IntegerColumn("group_product_id")
		CreatedAtColumn      = postgres.TimestampzColumn("created_at")
		allColumns           = postgres.ColumnList{IDColumn, UserIDColumn, GroupProductIDColumn, CreatedAtColumn}
		mutableColumns       = postgres.ColumnList{UserIDColumn, GroupProductIDColumn, CreatedAtColumn}
	)

	return userSubProductTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		UserID:         UserIDColumn,
		GroupProductID: GroupProductIDColumn,
		CreatedAt:      CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
