//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var MatchProductGroup = newMatchProductGroupTable("public", "match_product_group", "")

type matchProductGroupTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnInteger
	GroupID   postgres.ColumnInteger
	ProductID postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type MatchProductGroupTable struct {
	matchProductGroupTable

	EXCLUDED matchProductGroupTable
}

// AS creates new MatchProductGroupTable with assigned alias
func (a MatchProductGroupTable) AS(alias string) *MatchProductGroupTable {
	return newMatchProductGroupTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new MatchProductGroupTable with assigned schema name
func (a MatchProductGroupTable) FromSchema(schemaName string) *MatchProductGroupTable {
	return newMatchProductGroupTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new MatchProductGroupTable with assigned table prefix
func (a MatchProductGroupTable) WithPrefix(prefix string) *MatchProductGroupTable {
	return newMatchProductGroupTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new MatchProductGroupTable with assigned table suffix
func (a MatchProductGroupTable) WithSuffix(suffix string) *MatchProductGroupTable {
	return newMatchProductGroupTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newMatchProductGroupTable(schemaName, tableName, alias string) *MatchProductGroupTable {
	return &MatchProductGroupTable{
		matchProductGroupTable: newMatchProductGroupTableImpl(schemaName, tableName, alias),
		EXCLUDED:               newMatchProductGroupTableImpl("", "excluded", ""),
	}
}

func newMatchProductGroupTableImpl(schemaName, tableName, alias string) matchProductGroupTable {
	var (
		IDColumn        = postgres.IntegerColumn("id")
		GroupIDColumn   = postgres.IntegerColumn("group_id")
		ProductIDColumn = postgres.IntegerColumn("product_id")
		allColumns      = postgres.ColumnList{IDColumn, GroupIDColumn, ProductIDColumn}
		mutableColumns  = postgres.ColumnList{GroupIDColumn, ProductIDColumn}
	)

	return matchProductGroupTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		GroupID:   GroupIDColumn,
		ProductID: ProductIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
