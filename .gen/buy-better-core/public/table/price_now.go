//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var PriceNow = newPriceNowTable("public", "price_now", "")

type priceNowTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnInteger
	Price     postgres.ColumnFloat
	Currency  postgres.ColumnString
	CreatedAt postgres.ColumnTimestampz
	ProductID postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type PriceNowTable struct {
	priceNowTable

	EXCLUDED priceNowTable
}

// AS creates new PriceNowTable with assigned alias
func (a PriceNowTable) AS(alias string) *PriceNowTable {
	return newPriceNowTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PriceNowTable with assigned schema name
func (a PriceNowTable) FromSchema(schemaName string) *PriceNowTable {
	return newPriceNowTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PriceNowTable with assigned table prefix
func (a PriceNowTable) WithPrefix(prefix string) *PriceNowTable {
	return newPriceNowTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PriceNowTable with assigned table suffix
func (a PriceNowTable) WithSuffix(suffix string) *PriceNowTable {
	return newPriceNowTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPriceNowTable(schemaName, tableName, alias string) *PriceNowTable {
	return &PriceNowTable{
		priceNowTable: newPriceNowTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newPriceNowTableImpl("", "excluded", ""),
	}
}

func newPriceNowTableImpl(schemaName, tableName, alias string) priceNowTable {
	var (
		IDColumn        = postgres.IntegerColumn("id")
		PriceColumn     = postgres.FloatColumn("price")
		CurrencyColumn  = postgres.StringColumn("currency")
		CreatedAtColumn = postgres.TimestampzColumn("created_at")
		ProductIDColumn = postgres.IntegerColumn("product_id")
		allColumns      = postgres.ColumnList{IDColumn, PriceColumn, CurrencyColumn, CreatedAtColumn, ProductIDColumn}
		mutableColumns  = postgres.ColumnList{PriceColumn, CurrencyColumn, CreatedAtColumn, ProductIDColumn}
	)

	return priceNowTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		Price:     PriceColumn,
		Currency:  CurrencyColumn,
		CreatedAt: CreatedAtColumn,
		ProductID: ProductIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
